
#####################################################################
#   Macros
#####################################################################
[motors_sync]
axes: x,y
#    Axes on which calibration will be performed.
accel_chip: adxl345 
#    Accelerometer for vibrations collection: adxl345 / mpu9250 etc.
#encoder_chip_<axis>:
#    Axis, assigned encoder name, for measuring deviations.
#chip_filter: median
#    Filter type for data from the accelerometer: 'median' works well in
#    most cases, but some particularly noisy printers (fans, etc.) may
#    require a more powerful filter - 'kalman'. On lis2dw filters disabled.
#median_size: 3
#    Median filter window size.
#kalman_coeffs: 1.1, 1., 1e-1, 1e-2, .5, 1.
#    Simple coefficients describing the kalman filter.
#microsteps: 16
#    Maximum microstepping displacement of the stepper motor rotor.
#sync_method: default
#    Methods for synchronizing two axes on interconnected kinematics:
#    'alternately' - the axes calibrated alternately, step by step. (default)
#    'synchronous' - the axes calibrated depending on their magnitude,
#    trying to keep it at the same level.
#    Methods for synchronizing axis/axes on NOT-interconnected kinematics:
#    'sequential' - axes are calibrated sequentially. (default)
#steps_model: linear, 20000, 0
#    Mathematical model and its coefficients representing the dependence
#    of stepper motor microstep displacement on the measured magnitude.
#max_step_size: 3
#    The maximum number of microsteps that the motor can take move at time,
#    to achieve the planned magnitude.
#axes_steps_diff: 4
#    The difference in the positions of the motors in microsteps between
#    the two axes, to update the magnitude of the secondary axis. It is
#    used in the synchronous method, or in the process of axis alignment
#    in the alternately method. The typical value is max_step_size + 1.
#retry_tolerance: 0
#    The forced threshold to which a pair of stepper motors on one belt
#    will have to lower the magnitude of the oscillations. It's recommended
#    to configure in order to filter possible inaccuracies. After several
#    iterations of starting synchronization, you will find the edge, to
#    which this parameter should be omitted.
#retries: 0
#    The maximum number of repetitions to achieve the forced threshold of
#    oscillations.
#head_fan:
#    Toolhead fan, which will be turned off during sync to eliminate noise.

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    
[gcode_macro _CQGL]       ### CONDITIONAL QGL MACRO
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    CG28                      ; Home if not homed to get everything turned on
    QUAD_GANTRY_LEVEL         ; Level
    #G28 X Y                  ; Home the X and Y
    G0 X130 Y355 Z2 F9000     ; Move to brush
    G0 X75 F750               ; Move across the brush
    G0 X130 F750              ; Move across the brush
    G28 Z                     ; Home the Z now that nozzle is clean
    G0 X175 Y175 Z20 F6000    ; Return to center of bed

    # Conditional G28 (home if not already homed)

#####################################################################
#   PRINT_END macro
#####################################################################

[gcode_macro PRINT_END]
gcode: 
	RESPOND MSG="Done"
	
	#COOLDOWN
	BED_MESH_CLEAR
	
	M400
	G91
	
	G1 E-0.3 F3600
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.z < (max_z - 50) %}
	{% set z_safe = 50.0 %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}

    {% set z_safe =  10 %} #printer.toolhead.position.z +
	
	G0 X{x_safe} Y{y_safe} Z{z_safe} F30000
	
	SET_GCODE_OFFSET Z=0
	TURN_OFF_HEATERS
	PARK_NOZZLE
	
	G1 E-10.0 F4800
	
	#WIPE_NOZZLE CYCLES=1
	
	M106 S128
	G4 P30000
	
	#WIPE_NOZZLE
	
	G92 E0
	M107




[gcode_macro PARK_NOZZLE]
description = Park the nozzle
gcode:
	SAVE_GCODE_STATE NAME=PARKNOZZLE
	#CONDITIONAL_HOME
	G90
	G0 X173 Y175 F30000                         #G0 X15 Y15 F30000
	RESTORE_GCODE_STATE NAME=PARKNOZZLE




####################################################################################
###################         ELLIS PRINT TUNING MAROS         #######################
####################################################################################

[gcode_macro M109]         ### REPLACE M109(HOTEND) AND M190(BED) WITH TEMPERATURE_WAIT
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

# [gcode_macro M190]
# rename_existing: M99190
# gcode:
#     #Parameters
#     {% set s = params.S|float %}

#     M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
#     {% if s != 0 %}
#         TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
#     {% endif %}
############     ############     ############     ############



[gcode_macro _CG28]       ### CONDITIONAL HOMING MACRO
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}





[gcode_macro DUMP_VARIABLES]                                                #   NAME (string) - Filter results based on name (only show varables with names containing this string)
gcode:                                                                      #   VALUE (string) - Filter results based on value (only show values containing this value)
    {% set filter_name = params.NAME|default('')|string|lower %}            #   SHOW_CFG (integer, 0-1) - Set to 1 to include entire config in output. Default 0 (config filtered out)
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}


[gcode_macro GET_VARIABLE]                               #   NAME (string) (required) - Specify the name of the variable that you want to retreive.
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

####################################################################
###################          PID TUNING          ###################
####################################################################
[gcode_macro PID_HEATERS]
description: PID Tune for both Heaters, sample call: PID_HEATERS BED_TEMP=60 EXTUDER_TEMP=205
gcode:
   {% set BED_TEMP = params.BED_TEMP|default(60)|float %} 
   {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}
   G28
   G1 X110 Y110 Z5
   PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
   M106  # Turn up parts cooling fan
   PID_CALIBRATE HEATER=extruder TARGET={EXTRUDER_TEMP}
   TURN_OFF_HEATERS
   SAVE_CONFIG

[gcode_macro PID_BED]
description: PID Tune for Bed Heaters, sample call: PID_BED BED_TEMP=60 
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    G28
    G1 X110 Y110 Z5
    PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
    TURN_OFF_HEATERS
    SAVE_CONFIG


  

###################################
###################
###################################

[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1


###################################
###################
###################################

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

###########################################################



###################################
###################
###################################





[gcode_macro QUAD_GANTRY_SCAN]
gcode = 
	QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1.000
	QUAD_GANTRY_LEVEL horizontal_move_z=2




[gcode_macro Beacon_Soak]
gcode:
    {% set BEACON_TARGET = params.BEACON_TARGET|default(50) %}
    {% set BEACON_MAXIMUM = params.BEACON_TARGET|int + 7 %}
    {% set EXTRUDER = params.EXTRUDER|default(265)|int - 60 %}
    {% set BED = params.BED|default(110) %}
    
    M106 S255
    G0 X90 Y90 Z2
    M104 S{EXTRUDER}
    RESPOND MSG="Heating Bed"
    M190 S{BED}
    {% if BEACON_TARGET|int > 0 %}
        RESPOND MSG="Cooking Bacon"
        TEMPERATURE_WAIT sensor="temperature_sensor beacon_coil" MINIMUM={BEACON_TARGET} ;MAXIMUM={BEACON_MAXIMUM}
        RESPOND MSG="Bacon is done"
    {% else %}
        RESPOND MSG="Skipping Bacon"
    {% endif %}